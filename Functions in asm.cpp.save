
//=============================================================================
//                                 MEMSET                                     ;
//=============================================================================

//cx - cnt of bytes, which we have to change
//di - ptr on memory
//ax - val

    rep stosw       ; mov es:[di++], ax (cx times)


//=============================================================================
//                                 MEMCHR                                     ;
//=============================================================================

// bx - ptr on memory
// ax - val
// cx - len

again:
    dec cx
    jb end

    mov dx, [bx]
    inc bx
    cmp dx, ax
    jne again

    (bx - 1) - answer
end:
    no answer


//=============================================================================
//                                 MEMCPY                                     ;
//=============================================================================

// es:[di] - from
// ds:[si] - to
// cx - len

    rep movsb       ; es:[di++] = ds[si++] (cx times)


//=============================================================================
//                                 MEMCMP                                     ;
//=============================================================================

// ds:[si] - 1 block (of memory)
// es:[di] - 2 block
// cx - len

    repe cmpsb
    jne answer


answer:
    dec si
    dec di

    cmp ds:[si], es:[di]
    ja answer_1

    res = -1

answer_1:
    res = 1


//=============================================================================
//=============================================================================
//=============================================================================


//=============================================================================
//                          STRLEN (0 - terminated)                           ;
//=============================================================================

// bx - offset text
// cx = 0 (counter)

//    inc cx
//    cmp [bx], 0h
//    je end
//    inc bx
//
//end:
//    answer = cx


// al = 0

    repe scasb

//=============================================================================
//                                 STRCMP                                     ;
//=============================================================================

// ds:[si] - offset text_1
// es:[di] - offset text_2
// cx = strlen () - 1

    res = memcmp


//=============================================================================
//                                 STRCHR                                     ;
//=============================================================================

// al - symbol which we want to find
// es:[di] - offset
// cx = strlen () - 1

    repne scasb         ; while (es:[di++] != al)


//=============================================================================
//                                 STRCPY                                     ;
//=============================================================================

// 